# Class is a container or you can say a Outlet with blank spaces for objects.
 
# Everytime a class is called, it crates a new instance(in new address) and we can add variables 
for each instance from main code which will only be created for a perticular instance.

# New instance isn't created until we call class by paranthesis. without paranthesis it returns class name

## Always start Class name with capital letter.

# All the instances share the variables on class, a  instance cant change(but can access) the class variables 
but can change for himself by creating a new variable for himself, but class himself can change the variable in it.

### .__dict__ attribute is used to see all the variables in a instance or in a class.

## What is self ? :- self vo h jiski baat ho rai h. (vo instance or object jo class ke andar ghussa h)
tum self ko ek blank jaise maan skte ho, jisme automatically hi object ka naam fill ho jaata h.

jaise apan baat kr raye the na ki : rohan.name = "Adf" aur shrey.name = "Shrey" ab apan rohan ya shrey ki jagah self likh dete h bs.

### Constructor : are kuch nai yaar vo __init__ hota h na usiko bolte h Constructor. Aur ye toh pata hi hoga ki kyo use hota h....
                  class ke andar object variables banane ke liye...Simple. for example see example hahaha.....

        Aur are hn, jo object variables banaye h, unki value alag se thodi call karenge. Nai toh mtlb kya rahega humaare Constructor karenge
        Issi liye class object ke time hi values de di jaati h. see example

        #Self mai koi daya nt dikaana, usko ek variable(object) jaise hi treat krna

#Attributes are of 2 types : data attribite and methods. Now, data attributes are nothing just the class variables.
                             and methods are just functions.(normal function(oblect based(self waale yaar)))
  IN GENERAL TALK, ATTRIBUTES ARE THE VARIABLES AND METHODS ARE THE FUNCTIONS

# Class Method :- Class method kuch nai bs same class ko class ke andar se access krne ke liye use hote h
                  mainly its used as an alternative Constructor, kyoki kai baar apan class ko parameters
                  alag tarike se dena chahte h toh issse de skte h. ex : alternative Constructor
                  Also, with the help oh class method we can change class variable from a object jo normally
                  object ki aukat ke pare h. ex in self& Constructor. It take class as an argument.
                  (just write cls)
       
       # IT USES DECORATER and cls is nothing, just short form of class but is mandetory. see example.

# method is refered to normal function(object based), class method is for whole class while static is based on nothing.

# Static Method : Its the plan method which neither take self as an argument nor cls as an argument
                  (like inclass method). It is used for simple tasks like print a thing but only for 
                  perticular object or things like that. actually we can do same thing from normal function Also
                  by ignoring self but it decreases the efficiency of program which is not good. 


#Data Abstraction : data abstraction is only displaying the essential parts and hidding other details(Dividing things into different layers). 
                    Like in car, the user only knows how to start a car, other process of igniting engine is abstacted from user. There are different layer of abstractions such as
                    layer 1 - press button to start car 
                    under which layer2 :  command to ignite the engine // this is abstracted from user and done by chip designer
                    under which mechanism of engine to produce energy  // this is another layer of abstraction, which is abstracted from chip designers 

#Encapsulation : (Aam khao guthliya na gino) Encapsulation is a word refered to binding of things in a single unit. 
                 here things could be referd to varibles, methods, etc. binded together in a class. 
                 the other person can just use the class and its attributes without worring about the code. 

#Encapsulation vs Data Abstraction

Encapsulation is data hiding(information hiding) while Abstraction is detail hiding(implementation hiding).
While encapsulation groups together data and methods that act upon the data, data abstraction deals with
exposing the interface to the user and hiding the details of implementation.

# Class Inheritance : the inherited class posesses all the attributes and method of parent class and in addition, can hava its own attributes 
                      and methods.

#Inheritance is of 3 types:

A) Single Inheritance : Normal inheritance in which child posses everything of parent class.

B) Multiple Inheritance : In this a single class have more than 1 parent class. In this the contructor of first class
                          will be used. Also if any attribute (variable or method) is of same name in parent classes than
                          attribute of first parent class(class entered in first position) will be used. (if not with same 
                          name in its own class else it will use its very own attribute)

C) Multilevel Inheritance : It is a type of inheritance in which the parent class can also have one or more parent classes.
                            The attributes are stacked. like first it will search in itself than the parent class. Then 
                            the grand parent class, then grand grand parent class, and so on...

                            first it checks all the instance variabels in sequence and then start class variables again from bottom.
                            Remember : Instance variables of parent class are only created if super().__init__() is called. 

# Access Specifiers:

A) Public : It is a specifier which lets the attribute and method be accessed anywhere(in inherited classes, in main program by creating an instance)
            and anytimeBy default every attribute and method is public in python. Theres no specific way to write them.

B) Protected : It lets the attribute and method be accessed by all the child class only, It can't be accessed anywhere by just creating an instance.
               To make an attribute or method protected, its name needed to be started with underscore.
               (python ka protected bakwas, can be access even in other program)

C) Private : It only lets the attribute and method be accessed by its own class members,neither child classes nor other classes can access them.
             Actually, it can be accessed outside also by adding "_<class name>__<var name>" because python just do name Mangaling of variable
             so that, it can't be used by mistake. To make a attribute private, its name needed to start with double underscore.

Ex: var1 = 234               -         public 
   _var2 = 23423             -         protected
  __var3 = 23423             -         private

# Polymorphism : Ability to take various forms. Changing behaviour according to need. 
                 need ke  hisaab se apna behaviour change krna
                 Like 2+3 = 5 while '2'+'3' = 23
                 though operend is same("+") 
                 Polymorphism can be achived by overriding or dunder methods(magic methodddd.....)


# Overriding : Whenever any attribite/member(class or instance variable OR any method), present in parent class
               is called again in child class, its values are overrided with new values.

        # pattern followed by compiler when accessing/searching any variable in child class:-

        child instance variable -> parent instance variable -> child class variable -> parent class variable
        (remember: if a variable of some name is called through child class and same name variable is present 
                   as class varible in child class and instance variable in parent class, then instance variable 
                   of parent class would be called)

        Once a method is overrided(called with same name) in child class, then method of parent class is not even called
        to call parent method super() is used.

        we can get variables also using super().variableName 

        we can use super().methodName whenever we want (It would override any exsisting variables with same name)

# Diamond Shape Problem : It is a problem caused when multiple inheritance is used. Thats why, its not usually prefered
                          to use multiple inheritance(instead use single and multilevel). Its not like a big problem in
                          Python due to python's rules and syntaxes but could be a huge problem in other languages.

                                                    A          # A is a independent class and parenet class of B and C
                                                  __|__
                                                 ^     ^           
                                                 |     |
                                                 B     C       # B & C are the parent class of D(multiple inheritance)
                                                 |__ __|       # And child classes of A
                                                    ^
                                                    |
                                                    D          # D is the child class of B and C using Multiple Inheritance

              In this situation if a method is called from instance of D, which is present in both classes B and C(Or present in A and B) 
              then compiler gets confuse which method to run and this confussion is called diamond shaped problem.

              In python, first it checks on the first class written as parent class then it goes on second class.
              Therefore, theres no problem in python.

# Dunder Methods  :  These are the special methods who's name starts and end with double underscore. Sahi padke ho, init ek dunder method hi h.
  (Magic Methods)    Vese Dunder bole toh Double Underscore(Mst short form h). These methods are used for operator overloading and many others 
                     Such as : __repr__ and __str__ :
                          str() is used for creating output for end user while repr() is mainly used for debugging and development. 
                          repr’s goal is to be unambiguous and str’s is to be readable. 
                          seedhi si baat h ki repr developers ke liye h(batata h kon sa parameter string chaiye aur kon sa int ya other)
                          aut str bs object ke baare mai bata do normal admi ki bhasa mai.

                  remember: repr,str,+,- normally sb type ke datatypes ke liye hote h pr apni class pe usko kaise apply krna h ye dunder method
                            batata h. kyoki tum aise hi toh emp1 + emp2 nai kr skte na

# Operator Overloading : Kuch nai re bs dunder methods ka use kr ke apni classes mai operators ko laagu karana.
                         jaise :  emp1/emp2 ya emp1-emp2 
                         toh return kya krna h in operators mai vo define krna hi operator overloading hota

                         pr kon sa operator kis naam ke function se saved h ye tumko yaha dekhna padega:
                         https://docs.python.org/3/library/operator.html
                         neeche side dekhna mapping of operator likha hoga, bs unhhi ke naam ke aage peeche "__" ye laga kr mst karo use
                         ex : __add__, __truediv__, __floordiv__, __and__,
                         jyada padh mt seedha example dekkh le 

# Abstract Base Class(ABC) : Arre ek sbse parent class bana di jaati h jo ABC class ki child hoti h(ABC IMPORT KRNA PADTA H)
                             Ye class iska hisaab rakhti h ki iski saari child classes mai vo functions ho jo iss class ke ander
                             defined h. agar iski koi bhi child class ke andar is naam(jis naam ka function abc mai h) ka function
                             na ho to error aata h. Aur hn, tum directly ABC(Jo bhi parent banaye ho) class ka instance nai bana skte.

# Property Decorator : When we want to access a function as an attribute (variable) then we use property decorator on that 
                       function.(Like when we want a statement which contains other instance variables whoes value keeps
                       changing then we use function but if we want that function as an vaiable then we use this decorator)

# Setter Decorator : its used to do operations when a value is assigned to the function which was used as an attribute 
                     (using property decorator) as we cant assign a value to the function, in general. 
                 
                   Syntax : @<function_name>.setter
                            def function_name(self,<assigned value>)

# Deleter : its used to do operations when "del" keyword is used to the function which was used as an attribute 
             (using property decorator) as we cant assign a value to the function, in general. 

            Syntax : @<function_name>.deleter
                     def function_name(self)

# Object Introspection : aree object ki talaashi lena ya kehna chaiye Introspection krna(jaise police krti h na)
                         object ki saari details lena ki bhiaya kis class ke object ho, kon kon se class and instance 
                         variables h tumhaare paas, kon kon se methods laga skte h tumpe (Including predefined methods)

                         ye krne ke kuch tarike : type() , id() [every objects(including strings, int, etc.)are assinged a unique
                                                  id. In python if 2 variables have same value then both variables just points on 
                                                  that value address so 2 different address are not assigned hence have same id]
                                                  dir()[are sb bata deta h]

                        # Inspect : this module needs to be imported and with help of it we can get every 
                                    and classified info of a object.  
                                    Google kr le. 

--------------------------------------------------------X---------------------------------------------------------------------------------------------------                                                            